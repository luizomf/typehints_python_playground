from collections.abc import Sequence
from typing import TypeGuard, reveal_type

from utils import sep_print

################################################################################
#
# TypeGuard no Python: O Fiscal de Tipos Que Voc√™ N√ÉO Conhece üö® (Aula 16)
#
# `TypeGuard[T]` e `TypeIs[T]` s√£o usados para "Type Narrowing" (afunilamento de tipo)
# no Python. Ambas fazem algo similar ao que j√° vimos com `isinstance()`, por√©m
# diferem nos argumentos de entrada e no contexto.
# `TypeGuard` funciona de uma forma contra intuitiva, enquanto `TypeIs` √© bem
# mais tranquilo de ser utilizado.
#
################################################################################
#
# Obs.: As PEPs 742 e 647 falam sobre `TypeIs` e `TypeGuard`. Nessa aula vamos
# focar em `TypeGuard` e na pr√≥xima falamos sobre `TypeIs`.
#
################################################################################
#
# Uma forma bem simples de entender o que `TypeGuard[T]` e `TypeIs[T]` fazem √©
# sempre imaginar cada um deles como `isinstance()` s√≥ que dentro da sua pr√≥pria
# fun√ß√£o, com seus argumentos e retorno de tipo. Depois √© s√≥ entender as
# peculiaridades de cada um.
#
################################################################################
#
# Como `TypeGuard[T]` Funciona? (`T` sendo tipo target)
#
# - Usado para anotar o retorno de uma fun√ß√£o de afunilamento de tipo (Type Predicate).
# - Se o retorno da fun√ß√£o for `True`, o tipo √© afunilado para `T`.
# - Se o retorno da fun√ß√£o for `False`, explico mais abaixo em "IMPORTANTE".
# - D√° para enviar muitos args para a fun√ß√£o, mas o primeiro √© para o tipo de entrada.
# - O tipo do primeiro argumento pode n√£o ter rela√ß√£o com `T`.
# -` TypeGuard[T]` PODE ser gen√©rico (`T` pode ser din√¢mico).
# - `TypeGuard[T]` aceita `Callable[..., T]` e Callback Protocol (que vimos antes).
#
################################################################################
#
# IMPORTANTE: `TypeGuard[T]` faz type "cast" permanente no caminho `True`. Por
# isso, ao analisar o c√≥digo ap√≥s o bloco `if/else`, o type checker precisa
# considerar as duas possibilidades que poderiam ter acontecido: o tipo original
# (se o caminho `False` foi seguido) e o novo tipo `T` (se o caminho `True` foi
# seguido). Por isso, ele cria uma Union para representar essa incerteza.
#
################################################################################


def is_list_str(values: Sequence[object]) -> TypeGuard[list[str]]:
    return all(isinstance(v, str) for v in values)


################################################################################


if __name__ == "__main__":
    sep_print()

    items1 = [22, "a"]
    if is_list_str(items1):
        reveal_type(items1)  # list[str] -> Comportamento esperando
    else:
        reveal_type(items1)  # list[str | int] -> Comportamento esperado

    # Fora do bloco condicional, o type checker n√£o faz ideia se seu tipo √©
    # `list[str]` ou `list[str | int]`. Para Ele agora existem dois caminhos
    # poss√≠veis: `list[str]` ou `list[str | int]`. Isso √© porque o `TypeGuard`
    # faz `cast` permanente ap√≥s seu uso.

    # Aqui o tipo √© a altera√ß√£o permanente do TypeGuard ou o seu tipo
    reveal_type(items1)  # list[str] | list[str | int]

    sep_print()

################################################################################

#-------------------------------------------------------------------------------
Este arquivo é TXT puro
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
Título
#-------------------------------------------------------------------------------

TypeVar e Funções Genéricas no Python 3.13 (Nova Sintaxe, PEP 695) - Aula 8

#-------------------------------------------------------------------------------
Descrição
#-------------------------------------------------------------------------------

Finalmente chegou a hora dela: a aclamada, a linda, a maravilhosa.... A nova sintaxe do Python para TypeVar (Type Variables) e Genéricos... E olha que é novo mesmo hein, do Python 3.13 para frente, sem importar nada, só colchete e T. Obs.: Isso iniciou no Python 3.12, só pra constar.

Neste vídeo, vamos aprender a nova sintaxe de parâmetros de tipo (TypeVars) para Funções Genéricas (Generic Functions). Vamos comparar o jeito "antigo" (com TypeVar[_T]) com o "novo" jeito, mais direto e intuitivo. Você vai aprender a criar funções flexíveis, como uma que inverte qualquer dicionário, e entender as regras de restrição de tipos (bounds e constraints).

Esta é uma aula prática para quem quer dominar a criação de componentes de software reutilizáveis e com tipagem robusta no Python moderno.

Nesta aula da nossa playlist completa sobre Type Hints no Python, você vai aprender:

- O que é uma Type Variable (TypeVar) e como ela cria "vínculos" de tipo.
- A nova sintaxe da PEP 695 para criar funções e classes genéricas (def func[T]: ...).
- A diferença entre a sintaxe antiga (typing.TypeVar) e a nova, e quando cada uma deve ser usada.
- Como criar restrições de tipo (bounds e constraints) com a nova sintaxe.
- A importância do Hashable para criar funções genéricas seguras que manipulam dicionários.
- Como os diferentes type checkers (Pyright vs. Mypy) podem interpretar casos de borda.
- E mais um monte de coisa, como sempre...

Se você quer escrever código Python que seja ao mesmo tempo flexível e seguro, dominando a arte da programação genérica, esta aula é para você.

E lembre-se: Type Hint é igual a Type Annotation (tipagem no Python).

Este vídeo é parte de uma playlist, essa é a OITAVA aula. Segue o link da playlist para acompanhar:
https://youtu.be/8xnIkjROj_o?si=ZayOULdLoMF74Iwg


Link do repositório:
https://github.com/luizomf/typehints_python

Conheça meus cursos em:
https://www.otaviomiranda.com.br/

Capítulos
00:00:00 - A Nova Forma de Criar Funções Genéricas em Python
00:00:00 - O que é uma Type Variable (TypeVar)?
00:00:00 - Sintaxe Antiga vs. Nova (PEP 695): Uma Comparação
00:00:00 - Criando uma Função Genérica: filter_by_type
00:00:00 - Exemplo Prático: Invertendo um Dicionário Genérico (invert_mapping)
00:00:00 - A Importância do Hashable para Chaves de Dicionário
00:00:00 - Restringindo Tipos: Bounds vs. Constraints
00:00:00 - A "Pegadinha" dos Type Checkers: Pyright vs. Mypy
00:00:00 - Conclusão: Quando usar a Sintaxe Nova ou a Antiga?

#-------------------------------------------------------------------------------
Até 5 hashtags
#-------------------------------------------------------------------------------

#Python #TypeHints #Generics #Python3 #PEP695

#-------------------------------------------------------------------------------
Tags invisíveis do Youtube separadas por vírgula (máx. 500 caracteres)
#-------------------------------------------------------------------------------

python typevar,python generics,PEP 695,python 3.12 typing,funções genéricas python,classes genéricas python,python type parameters,typing.TypeVar,type hints avançado,python bound typevar,python constraints typevar,python hashable,curso de type hints,tutorial python moderno,novidades python 3.12,programação genérica,código limpo python,arquitetura de software,Luiz Otávio Miranda,Pyright vs Mypy,tipagem estática,python moderno,python tutorial

#-------------------------------------------------------------------------------
Fim
#-------------------------------------------------------------------------------

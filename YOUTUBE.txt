Na aula passada, aprendemos sobre a variância (covariância, contravariância e invariância). Agora, vamos dar o próximo passo e colocar a mão na massa: vamos aprender a criar nossas próprias classes de coleção implementando os protocolos do collections.abc. Ao terminar essa aula, você vai entender e saber implementar qualquer um Genérico ABC da biblioteca padrão do Python.

Nesse vídeo, vamos usar o Sequence[T] como nosso guia. Você vai descobrir que, ao implementar apenas dois métodos mágicos (__getitem__ e __len__), o Python te dá de graça uma infinidade de outros comportamentos, como fatiamento (slicing), iteração, o operador in, a função reversed() e muito mais!

Esta é uma aula fundamental para quem quer parar de apenas usar as coleções do Python e começar a entender como elas realmente funcionam por baixo dos panos.

Nesta aula da nossa playlist completa sobre Type Hints no Python, você vai aprender:

- O que é o "contrato" de um Sequence e por que ele é a base para coleções ordenadas e imutáveis.
- A usar @overload para tipar corretamente o __getitem__, que pode receber int ou slice.
- Como tornar sua classe um iterador, implementando o protocolo de iteração (__iter__ e __next__).
- A ver na prática todo o comportamento que sua classe "ganha de presente" ao herdar de Sequence.

Se você quer entender o Data Model do Python e ser capaz de criar seus próprios tipos de dados que se integram perfeitamente com a linguagem, esta aula foi feita para você.

E lembre-se: Type Hint é igual a Type Annotation (tipagem no Python).

Este vídeo é parte de uma playlist, essa é a SEXTA aula. Segue o link da playlist para acompanhar:


Link do repositório:
https://github.com/luizomf/typehints_python

Conheça meus cursos em:
https://www.otaviomiranda.com.br/

Capítulos
00:00:00 - Intro: Criando nossas próprias coleções!



#Python #TypeHints #POO #Collections #PythonBrasil

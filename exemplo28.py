from collections.abc import Callable
from typing import Protocol

from utils import cyan_print, sep_print

################################################################################
#
# Callback protocol, o detonador de Callable ü§Øüí•
#
# Obs.: √© s√≥ brincadeira, viu? Adoro `Callable` tamb√©m.
#
#
# Obs.: nada do que vou descrever aqui est√° certo ou errado, s√≥ depende do que
# voc√™ precisa.
################################################################################

# Me diz uma coisa, o que significa isso aqui?
type ReallyRelaxedCallable = Callable[..., None]  # (*args, **kwargs) -> None

# E isso?
type MysticCallable = Callable[[int, int, str], bool]  # (1, 2, 'a') -> true

# Podemos afirmar o seguinte:
# `ReallyRelaxedCallable` recebe qualquer coisa e retorna `None` [PONTO].
# `MysticCallable` recebe `int`, `int` e `str` e retorna `bool` [PONTO].

################################################################################
#
# N√£o h√° nada de errado em usar `Callable`, de fato, vamos usar muito mais eles
# do que os `Protocols`.
# Por√©m, em algum momento o nome dos argumentos v√£o importar. Talvez voc√™ crie
# uma fun√ß√£o que s√≥ possa receber argumentos nomeados ou que possa ter uma
# assinatura muito complexa.
# Nesses casos os callback protocols resolvem o problema.
# Com eles √© poss√≠vel definir um contrato atrav√©s de um protocol e depois fazer
# o que quiser com o m√©todo `__call__`.
#
################################################################################


# O callback protocol (√© muito f√°cil de implementar)


class CallbackProtocol(Protocol):
    # Basta que voc√™ defina a assinatura da sua fun√ß√£o no m√©todo `__call__`.
    # Por favor, nunca esque√ßa do `self`.
    def __call__(self, *, whatever: str) -> str: ...


################################################################################

# Fun√ß√µes para testar: uma tem a assinatura correta, a outra n√£o.


def good_func(*, whatever: str) -> str:
    """Essa fun√ß√£o cumpre o contrato ‚úÖ"""
    return whatever


def bad_func(not_good: str) -> str:
    """Essa N√ÉO fun√ß√£o cumpre o contrato ‚ùå"""
    return not_good


################################################################################

# Bora testar tudo

if __name__ == "__main__":
    sep_print()

    # üßê Isso aqui √© s√≥ para obcecado por tipos. N√£o necess√°rio.
    # Geralmente, vamos usar callback protocol com... advinha? [callbacks]
    # Mas, vai servir para nosso primeiro exemplo sem complicar as coisas
    good: CallbackProtocol = good_func
    bad: CallbackProtocol = bad_func

    # Vamos usar as fun√ß√µes
    same_str_good = good(whatever="Aqui est√° sua string de volta")
    same_str_bad = bad(not_good="Aqui est√° sua string de volta")

    # O Python meio que N√ÉO T√Å NEM A√ç (como sempre)
    cyan_print(f"{same_str_good}")  # Python ‚úÖ
    cyan_print(f"{same_str_bad}")  # Python ‚úÖ

    sep_print()


################################################################################
